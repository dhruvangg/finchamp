import React, { Component } from 'react'
import { Field, Form, Formik } from 'formik';
import * as Yup from "yup"
import transactionSlice, { addTransaction } from 'redux/slices/transactionSlice';
import { connect } from 'react-redux';
import { apiSlice } from 'redux/slices/apiSlice';
import { toInr } from '../../lib';
import Income from './income';

const FormSchema = Yup.object().shape({
    category: Yup.string().required('Please select an option'),
    amount: Yup.number().required('Amount is required')
})

const initialValues = { category: 'Salary', amount: 0 }

const mapStateToProps = (state) => {
    const result = apiSlice.endpoints.getPlanner.select()(state)
    const { data, status, error } = result
    return {
        ...state,
        planner: { data, status, error }
    }
}

// const mapStateToProps = (state) => ({
//     planner: apiSlice.endpoints.getPlanner.select()(state)
// })

const mapDispatchToProps = {
    addTransaction: (values) => addTransaction(values),
    getPlannerData: apiSlice.endpoints.getPlanner.initiate
}


class ExpenseTracker extends Component {

    componentDidMount() {
        // const { getPlannerData } = this.props
        // getPlannerData()
    }

    render() {
        const { transaction, planner: { data, status, error } } = this.props
        return (
            <div>

                {transaction.map(el => {
                    return <li key={el.time}>{el.category} {toInr(el.amount)}</li>
                })}
                <Formik initialValues={initialValues} validationSchema={FormSchema} onSubmit={values => this.props.addTransaction(values)}>
                    {({ errors, touched }) => (
                        <Form>
                            <div className="grid lg:grid-cols-6 sm:grid-cols-4 grid-cols-2 gap-4">
                                <Income />
                            </div>
                            {errors.category && touched.category ? (
                                <div>{errors.category}</div>
                            ) : null}
                            <div className='my-4'>
                                <label htmlFor="amount">Amount</label>
                                <Field name="amount" type="number" id="amount" className="px-4 py-2 rounded-lg border border-primary w-full outline-none" />
                                {errors.amount && touched.amount ? (
                                    <div>{errors.amount}</div>
                                ) : null}
                            </div>
                            <button type="submit" className="outline-none font-semibold bg-primary rounded-lg text-white w-48 py-2 px-4">Add</button>
                        </Form>
                    )}
                </Formik>
            </div>
        )
    }
}

export default connect(mapStateToProps, mapDispatchToProps)(ExpenseTracker);
